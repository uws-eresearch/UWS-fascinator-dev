#if($renderContent)
<script type="text/javascript" src="$portalPath/js/modernizr-1.5.min.js"></script>
<script type="text/javascript" src="$portalPath/mediaplayer/jwplayer.js"></script>
<script type="text/javascript" src="$portalPath/mediaplayer/swfobject.js"></script>

#set($validFFmpeg = $self.parseFFmpeg($parent))
#set($oid = $metadata.get("id"))
#set($mimeType = $metadata.getFirst("dc_format"))
#set($thumbnail = $self.getSplashScreen($metadata, ""))
#set($preview = $metadata.get("preview"))
#set($fallbackPreview = $preview)
#set($previewPid = $parent.getPreviewPid())
#if ($previewPid != "")
    #set($preview = $previewPid)
#end
#set($pidMime = $self.getMimeType($preview, $parent))
#set($format = $self.getFFmpegData($preview, "format"))
#set($codec = $self.getFFmpegData($preview, "codec"))
#set($width = $self.getFFmpegData($preview, "width"))
#set($height = $self.getFFmpegData($preview, "height"))
#set($urlBase = $self.getUrlBase())
#set($duration = $self.getBasicFFmpegData("duration"))
#if ($duration == "")
    #set($duration = "0")
#end

<script type="text/javascript">
<!--
    var disableVideoAnotar = false;

    $(function() {
        function sizeFrame(width, height) {
          #if (!$parent.isDetail())
          ### Fix for living inside an iframe.
          ### The player needs to resize the iframe after the video loads.
            // Check if we are even in a frame
            var iframe = $(parent.document.getElementById('iframe-video-player'));
            if (iframe) {
                iframe.height(height + 20);
                iframe.width(width + 20);
            }
          #else
            // We aren't living in an iframe this render
          #end
        }

        function getStyle(width, height) {
            return "width: " + width + "px; height: " + height + "px;";
        }
        var oid = "$oid";
        var filename = "$preview";
        var filepath = "$portalPath/download/$oid/" + filename;
        var fallback = "$portalPath/detail/$oid/$fallbackPreview";
        var thumbnail = "$thumbnail";
        var mimeType = "$pidMime";
        var isAudio = $self.jsBool($self.isAudio($pidMime));
        var isVideo = $self.jsBool($self.isVideo($pidMime));
        var player = {};
        var width = $width + 10;
        var height = $height + 10;
        var duration = $duration;
        if (width == 10) {
            width = 410;
            height = 234;
        }
        if (isAudio) {
            height = 20;
        }
        var style = getStyle(width, height);
        sizeFrame(width, height);

        ## Establish support for the codec in this browser
        var format = "$format";
        var codec = "$codec";
        var codecSupported = false;
        var codecTested = false;
        ## We only support flash video and mp3 audio if we don't know the codec
        if (codec == "" || (!isAudio && !isVideo)) {
            if (mimeType == "video/x-flv" || mimeType == "audio/mpeg") {
                codecSupported = true;
                codecTested = false;
            }
        ## Otherwise, test support
        } else {
            if (isAudio) {
                codecSupported = Modernizr.audio[codec];
                codecTested = codecSupported;
            }
            if (isVideo) {
                codecSupported = Modernizr.video[codec];
                codecTested = codecSupported;
            }
        }

        ## We don't support this content
        if (!codecSupported) {
            disableVideoAnotar = true;

            ## There's another preview, redirect
            if (filepath != fallback) {
                var message = 'It looks like your browser does not support playback of this video.';
                var link = '<a href="' + fallback + '" target="_blank">$fallbackPreview</a>';
                var html = '<p>' + message + '<br/><br/>Redirecting: ' + link + '</p>';
                $("#player-container").html(html);

                ## Some query parameters are in session from SSO round-trip
                ##   or they may be there as part of a normal GET request. This
                ##   method gets both and avoids duplication
                #set ($ssoQuery = "")
                #set ($qPreview = $velocityContext.get('formData').get('preview'))
                #if ($qPreview != $nullValue)
                    #set($ssoQuery = $ssoQuery + "&preview=" + $qPreview)
                #end
                #set ($qDownload = $velocityContext.get('formData').get('download'))
                #if ($qDownload != $nullValue)
                    #set($ssoQuery = $ssoQuery + "&download=" + $qDownload)
                #end
                window.location = fallback + "?$ssoQuery";

            ## We're done
            } else {
                var message = 'Sorry, but the content doesn\'t appear to be compatible with your browser, but the link below will let you download the content to player with a local player.';
                var link = '<a href="' + filepath + '" target="_blank">' + filename + '</a>';
                var html = '<p>' + message + '<br/><br/>Download: ' + link + '</p>';
                $("#player-container").html(html);
            }

        ## We SHOULD support the content, lets try to build a player
        } else {
            var widthHeight = 'width="' + width + '" height="' + height + '"';
            var html5test = Modernizr.video && codecTested;
            player1 = '';

            #####################
            ##  HTML5 Player
            #####################
            if (html5test) {
                player1 = '<video ' + widthHeight + ' controls><source src="' +
                    filename + '" ';

                #if ($thumbnail)
                player1 += 'poster = "' + thumbnail + '" ';
                #end

                player1 += 'type=\'$pidMime\'><a href=' + filepath +
                    '>Download this video</a></video>'

                $("#player-container").attr("style", style).html(player1);

            #####################
            ##  Flash fallback
            #####################
            } else {
                player1 = '<p id="player" style="' + style + '"></p>';
                $("#player-container").attr("style", style).html(player1);

                jwplayer("player").setup({
                    flashplayer: "$portalPath/mediaplayer/player.swf",
                    file: filepath,
                    duration: duration,
                    height: height,
                #if ($thumbnail)
                    width: width,
                    image: thumbnail
                #else
                    width: width
                #end
                });
            }
        }

        ## Annotation controls required for detail mode only
        #if($parent.isDetail())
        if (!disableVideoAnotar) {
            $("#player_seek_start").live("click", function() {
                jwplayer().seek(0);
            });
            $("#player_rewind").live("click", function() {
                jwplayer().seek(jwplayer().getPosition()-1);
            });
            $("#player_play").live("click", function() {
                jwplayer().play();
            });
            $("#player_forward").live("click", function() {
                jwplayer().seek(jwplayer().getPosition()+1);
            });
            $("#player_seek_end").live("click", function() {
                jwplayer().seek(jwplayer().getDuration()-1);
                jwplayer().pause();
            });
            $("#player_mark_start_time").live("click", function() {
                $("#txtStartMark").attr("value", jwplayer().getPosition());
                $("#player_mark_end_time").attr("disabled", false);
                $("#txtEndMark").attr("disabled", false);
            });

            $("#txtStartMark").live("keyup", function() {
                txtStartMarkVal = $('#txtStartMark').val();
                if (txtStartMarkVal != "") {
                    $("#player_mark_end_time").attr("disabled", false);
                    $("#txtEndMark").attr("disabled", false);
                } else {
                    $("#player_mark_end_time").attr("disabled", true);
                    $("#txtEndMark").attr("disabled", true);
                }
            });

            $("#player_mark_end_time").live("click", function() {
                $("#txtEndMark").attr("value", jwplayer().getPosition());
                start = $('#txtStartMark').val();
                end = $('#txtEndMark').val();
                processClip(start, end);
            });

            $("#txtEndMark").live("keyup", function() {
                start = $('#txtStartMark').val();
                end = $('#txtEndMark').val();
                processClip(start, end);
            });

            function processClip(start, end) {
                uri = "$urlBase$portalId/detail/$oid/$preview#";
                if (start != "" && end != "") {
                    //Use Normal Play Time as described in http://www.ietf.org/rfc/rfc2326.txt
                    uri += "t=npt:";
                    if (start != "" && start > 0) {
                        uri += start + "s"
                        if (jwplayer().getDuration() < start) {
                            //warning += "<li>The requested start-point is greater than the video's duration.</li>";
                        }
                    }
                    if (end != "") {
                        uri += "," + end + "s";
                        if (jwplayer().getDuration() < end) {
                            //warning += "<li>The requested end-point is greater than the video's duration.</li>";
                        }
                    }
                }
                $(".video-results-list").attr("rel", uri);
            }

            $(".player_clear_fragment").live("click", function() {
                $("#txtStartMark").attr("value", "");
                $("#txtEndMark").attr("value", "");
                $("#media_clip").attr("rel", "");

                jwplayer().pause();
                playlist = jwplayer().getPlaylistItem();
                playlist.start = 0;
                playlist.duration = playlist.oldDuration;
                jwplayer().load(playlist);
                jwplayer().play();
            });

            $("#player_play_fragment").live("click", function() {
                var start = $('#txtStartMark').val();
                var end = $('#txtEndMark').val();

                jwplayer().pause();
                playlist = jwplayer().getPlaylistItem();
                playlist.start = start;
                // Store the original duration
                if (!playlist.oldDuration) {
                    playlist.oldDuration = jwplayer().getDuration();
                }
                playlist.duration = end;
                jwplayer().load(playlist);

                jwplayer().play();
            });

            $(".player_play_clip").live("click", function() {
                var startTime = $(this).siblings(".startTime").text().replace("s", "");
                var endTime = $(this).siblings(".endTime").text().replace("s", "");
                jwplayer().pause();
                playlist = jwplayer().getPlaylistItem();
                playlist.start = startTime;
                playlist.duration = endTime;
                jwplayer().load(playlist);
                jwplayer().play();
                $(".player_reset").removeAttr("disabled");
            });

            $(".player_reset").click(function() {
                jwplayer().pause();
                playlist = jwplayer().getPlaylistItem();
                playlist.start = 0;
                playlist.duration = playlist.oldDuration;
                jwplayer().load(playlist);
                jwplayer().play();
                $(this).attr("disabled", "disabled");
            });
        } else {
            $(".player_reset").hide();
        }
        #end
    });
-->
</script>
#end
