#set($menuTitle = "Navigation")
#parseTemplate("wrapping/main-menu-open.vm")
<div id="package-toc"></div>
#parseTemplate("wrapping/main-menu-close.vm")

<script type="text/javascript" src="$portalPath/js/tree/jquery.tree.min.js"></script>

#####################
#### NOTE: This is the un-minified version of custom.vm Swap the files if you need to work on them
#####################
<script type="text/javascript" src="$portalPath/js/rvt.js"></script>
###<script type="text/javascript" src="$portalPath/js/rvt.min.js"></script>
<script type="text/javascript">
<!--
    $(function() {
        // remove the default actions
        $("#open-this, #reharvest-this").parent().remove();
        if ($("#actions-menu ul.menu li").length == 0) {
            $("#actions-menu").hide();
        }

        // ====================================
        // Blank or Package nodes should display a TOC page.
        // This method displays the TOC from this node and below.
        // ====================================
        var isTocPage = /^(blank|package)-/;
        function setupTocPage(id, node) {
            var rawId = id.replace(isTocPage, "");
            $(".package-content").html("");
            $(".package-content").append('<div id="' + rawId + '-content"></div>');

            var dest = $("#" + rawId + "-content");
            var source = $(node).find(" > ul");
            source.clone(true).appendTo(dest);
            $(dest).find("ul li a").each(function(count, item) {
                $(item).attr("href", "#" + $(item).parent().attr("id"));
            });
        }

        // ====================================
        // Fix relative links inside the content.
        // ====================================
        function fixLinks(content, selector, attrName, oid) {
            // Find every matching element
            content.find(selector).each(function(count, item) {
                item = jQ(item);
                // Make sure the target attribute exists
                var attr = item.attr(attrName);
                if (attr != null) {

                    // ====================================
                    // fix for IE7 attr() returning resolved URLs - strip base URL
                    var href = window.location.href;
                    hrefBase = href.substring(0, href.lastIndexOf("/"));
                    attrBase = attr.substring(0, hrefBase.length);
                    if (hrefBase == attrBase) {
                        attr = attr.substring(hrefBase.length + 1);
                    }

                    // ====================================
                    // Some object may be linked by application ID
                    if (attr.indexOf("tfObject:") == 0) {
                        var relUrl = "$portalPath/detail/";
                        var tmpUrl = attr.substring(9);
                        item.attr(attrName, escape(relUrl + tmpUrl));
                    } else {

                        // ====================================
                        // Everything else... payloads, images and links
                        if (attr.indexOf("#") != 0 && attr.indexOf("://") == -1 && attr.indexOf("/") != 0) {
                            var relUrl = "$portalPath/detail/" + oid + "/";
                            item.attr(attrName, relUrl + escape(attr));
                        }
                    }
                }
            });
        }

        // RVT
        var rvt = rvtFactory(jQuery);
        // Basic parameters related to our page structure
        rvt.tocSelector = "#package-toc";
        rvt.contentSelector = ".package-content";
        rvt.contentBaseUrl = "$portalPath/detail/";
        rvt.serverRequestTemplate = "$portalPath/detail/{rvtHash}/?inPackage=true&preview=true";
        rvt.fixRelativeLinks = false;

        // ====================================
        // RVT will call this function to check if there is server side data to
        // query. Make sure TOC pages don't go to the server, as they will 403.
        // ====================================
        rvt.ignoreTest = function(hash) {
            if (isTocPage.test(hash)) {
                return true;
            }
            return false;
        };

        // ====================================
        // Specify the callback function we want executed BEFORE
        // a page change to fix any content.
        // ====================================
        rvt.contentParser = function(content) {
            // We want to fix image links and such here. If they are fixed
            // after the page loads a lot of dead requests could hit the server.

            // Fix all relative links on the page
            var oid = window.location.hash.substring(1);
            fixLinks(content, "a", "href", oid);
            fixLinks(content, "img", "src", oid);
        };

        // ====================================
        // Specify the callback function we want executed after
        // a page change to add our own custom actions.
        // ====================================
        rvt.contentLoadedCallback = function(rvt) {
            var oid = window.location.hash.substring(1);
            var title = $(window.location.hash).children("a").text();
            $(".article-heading").html(title);

            // Change highlighting in the TOC
            var tree = jQuery.tree.reference(rvt.tocSelector);
            tree.select_branch("#" + oid + " > a");

            // If this is a 'custom' node or a package-in-package we're
            //  going to put a TOC here for the child elements.
            if (isTocPage.test(oid)) {
                setupTocPage(oid, $("#" + oid));

            // Otherwise make the normal page content annotatable.
            } else {
                // === ANOTAR : Comments ===
                // Purge the old
                $(".package-content .object-comments").remove();
                // Add a new node
                $(".package-content > div:visible")
                    .append('<div class="object-comments"><div class="annotatable"><span class="hidden">' + oid + '</span>Comment on this item:</div></div>');

                // === ANOTAR : Tags ===
                // Purge the old
                $("div[rel='" + oid + "-tags']").remove();
                // Add new
                var tagTemplate = '<div rel="' + oid + '-tags">' +
                    '<div class="object-tag-list">Tags: <span class="object-tags"></span></div>' +
                    // Geonames is disabled for now
                    //'<div class="location-tag-list">Location: <span class="location-tags"></span></div>' +
                  '</div>';
                // Place it before the first element of the visible div
                $(".package-content > div:visible > :first").before(tagTemplate);

                // Make sure all Anotar nodes are visible
                $("#object-tag-list, #location-tag-list, .annotatable").show();
            }

            // Anotar is implemented elsewhere, but this lets
            //   it know how this page is structured
            setupTagging('div[rel="' + oid + '-tags"]', "$oid#" + oid);
            setupCommenting("$oid#" + oid,
                            "p:not([anotar-hash])," +
                            "h1:not([anotar-hash])," +
                            "h2:not([anotar-hash])," +
                            "h3:not([anotar-hash])," +
                            "h4:not([anotar-hash])," +
                            "h5:not([anotar-hash])," +
                            "h6:not([anotar-hash])," +
                            ".annotatable:not([anotar-hash])",
                            false);
            // Geonames is disabled for now
            //setupAnotarLocationTags();

            // Need to wait for images to load before calling
            //    the image annotation plugin.
            var imageNode = $("div[rel='" + oid + "'] > img");
            if (imageNode.length > 0 && imageNode.attr("rel") != "loaded") {
                var imageObj = new Image();
                imageObj.src = imageNode.attr("src");
                $(imageObj).load(function() {
                    imageNode.attr("rel", "loaded");
                    setupImageTagging("div[rel='" + oid + "'] > img", "$oid%23" + oid);
                });
            }
            return false;
        };

        // ====================================
        // Specify the callback function we want executed after the
        // package manifest has been parsed, used to display a TOC.
        // ====================================
        rvt.displayTOC = function(nodes) {
            // Build the data structure we need to give jQuery.
            // It will take care of the content generation.
            var opts = {
                data: {
                    type: "json",
                    opts: { static: nodes }
                },
                ui: { dots: false },
                types: {
                    "default": { draggable: false }
                },
                callback: {
                    onselect: function(node, tree) {
                        var id = $(node).attr("id");
                        if (isTocPage.test(id)) {
                            setupTocPage(id, node);
                        } else {
                            $("#object-tag-list, #location-tag-list, .annotatable").show();
                        }

                        window.location.hash = "#" + id;
                        var itemTitle = jQuery.trim($(node).children("a").text());
                        $(".article-heading").html(itemTitle);

                        return false;
                    }
                }
            }
            // Run jQuery's tree code using these options
            $(rvt.tocSelector).tree(opts);
        }

        // ====================================
        // Now finally kick off the packaging code
        // by giving it the path to the manifest.
        // ====================================
        var manifestUrl = "$portalPath/workflows/organiser.ajax?func=get-rvt-manifest&oid=$oid";
        rvt.getManifestJson(manifestUrl);
    });
-->
</script>
